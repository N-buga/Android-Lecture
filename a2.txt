onCreate с параметром типа Bundle. Чтобы не потерять данные на Activity, они сохраняются в Bundle

В каждом методе надо вызвать метод у super.

FrameLayout - поддерживает только 1 компонент, занимабщий весь layout.
wrap_content - по размеру содержимого. layout - описание. Их может быть много.

Класс R генерируется автоматически.

Перед уничтожением вызывается OnSaveStateInstance - там можно сохранить некоторые данные.

cntrl + f12 - поворот экрана.

после onResume - activity на экране

если Activity частично скрыто - onPause - наше Activity не активно, но всё равно видно. onSaveStateInstance будет вызван где-то около onPause

onResume - если надо захватить какие-то ресурсы(подключиться к датчику, анимация), чтобы отписаться от ресурсов - метод onPause.

onStop, onDestroy - могут быть не вызваны...

Activity кладутся в стек. Activity - один экран приложения.

BroadCastReceiver - почти не привязан к нашему приложению. Мктод onReceive - не может выполняться долго. context внутри - доступ к 
окружению снаружи. В андроид манифесте описано, на какие intent должен реагировать BroadCastReceiver.
android:exported = true - может получать сообщения android, а не только внутри приложения. Есть фильтр priority. Все receiver вызываются в 
порядке приоритета(от большего к меньшему). Если кто-то до нас скажет, что intent остановлен, то дальше он не пойдёт. Toast - всплывающее
сообщение, которое потом исчезает.

Intent(context, class) - говорит, что именно данный класс должен обработать этот интент. Если есть уже активити, то оно получит интент, 
иначе будет создано. Если мы хотим запустить активити из BroadCast то надо поставить флаг FLAG_ACTIVITY_NEW_TASK, который должен создать новый 
таск. Activity создаётся в этой таске. Все активити работают в тасках, а бровдресиверы - нет. Чтобы отправить интент надо вызвать startActivity.

getIntent() - возвращает intent, по которому мы вызвали этот активити. Всё в android запускается с помощью интентов. 
Fragments управляется Activity.

Service - может долго выполняться в бэкграунде. Более простой наследник класса сервис - IntentService - интерфейс попроще.
onHandleIntent() -приходят сообщения - они ставятся в очередь и по очереди обрабатываются, каждый раз запускаются метод.
чтобы запустить сервис, надо вызвать StartService. У сервиса тоже есть сервисы onCreate и onDestroy. Там тоже нужно вызывать super.

rawQuery - возвращает курсор, который итерируется по результатам запроса. 